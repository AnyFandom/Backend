description: Create fandoms

revision: ebef7e75726f
down_revision: 3f9ad65ecd20

upgrade: |
  CREATE TABLE fandom_moders (
    PRIMARY KEY (user_id, target_id),
    
    user_id   BIGINT NOT NULL,
    target_id BIGINT NOT NULL,
    edit_f    BOOL   NOT NULL,
    manage_f  BOOL   NOT NULL,
    ban_f     BOOL   NOT NULL,
    create_b  BOOL   NOT NULL,
    edit_b    BOOL   NOT NULL,
    edit_p    BOOL   NOT NULL,
    edit_c    BOOL   NOT NULL
  );

  CREATE TABLE fandom_bans (
    PRIMARY KEY (user_id, target_id), 
    
    user_id   BIGINT NOT NULL,
    target_id BIGINT NOT NULL,
    set_by    BIGINT NOT NULL,
    reason    TEXT   NOT NULL
  );

  CREATE SEQUENCE fandom_id_seq;
  CREATE TABLE fandoms (
    PRIMARY KEY (id),
    UNIQUE (url),
    
    id          BIGINT                    NOT NULL,
    created_at  TIMESTAMPTZ DEFAULT now() NOT NULL,
    edited_at   TIMESTAMPTZ DEFAULT now() NOT NULL,
    edited_by   BIGINT                    NOT NULL,
    url         CITEXT                    NOT NULL,
    title       TEXT                      NOT NULL,
    description TEXT DEFAULT ''           NOT NULL,
    avatar      TEXT DEFAULT ''           NOT NULL
  );

  CREATE TABLE fandoms_history (
    PRIMARY KEY (id, edited_at),
    
    id          BIGINT       NOT NULL,
    edited_at   TIMESTAMPTZ  NOT NULL,
    edited_by   BIGINT       NOT NULL,
    title       TEXT         NOT NULL,
    description TEXT         NOT NULL,
    avatar      TEXT         NOT NULL
  );
  
  CREATE FUNCTION fandoms_insert () RETURNS TRIGGER AS $$
    BEGIN

      NEW.edited_at = NEW.created_at;

      RETURN NEW;

    END;
  $$ LANGUAGE plpgsql;

  CREATE FUNCTION fandoms_update () RETURNS TRIGGER AS $$
    BEGIN

      NEW.edited_at = now();
      NEW.title = COALESCE(NEW.title, OLD.title);
      NEW.description = COALESCE(NEW.description, OLD.description);
      NEW.avatar = COALESCE(NEW.avatar, OLD.avatar);

      IF hstore(NEW) - hstore(OLD) - ARRAY['edited_by', 'edited_at'] = ''::hstore THEN
        RETURN NULL;
      END IF;

      INSERT INTO fandoms_history (id, edited_at, edited_by, title, description, avatar)
      VALUES (OLD.id, OLD.edited_at, OLD.edited_by, OLD.title, OLD.description, OLD.avatar);

      RETURN NEW;

    END;
  $$ LANGUAGE plpgsql;

  CREATE TRIGGER insert BEFORE INSERT ON fandoms FOR EACH ROW EXECUTE PROCEDURE fandoms_insert ();
  CREATE TRIGGER update BEFORE UPDATE ON fandoms FOR EACH ROW EXECUTE PROCEDURE fandoms_update ();

  CREATE FUNCTION fandoms_create (
    user_id     BIGINT,
    url         CITEXT,
    title       TEXT,
    description TEXT,
    avatar      TEXT
  ) RETURNS BIGINT AS $$
    BEGIN

      INSERT INTO fandoms (id, edited_by, url, title, description, avatar)
      VALUES (nextval('fandom_id_seq'), user_id, url, title, description, avatar);

      INSERT INTO fandom_moders
      VALUES (user_id, currval('fandom_id_seq'),
              TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE);

      RETURN currval('fandom_id_seq');

    END;
  $$ LANGUAGE plpgsql;

  CREATE FUNCTION fandoms_history (
    target_id BIGINT
  ) RETURNS SETOF fandoms AS $$

    SELECT * FROM fandoms WHERE id = target_id
    UNION
    SELECT
      f.id,
      f.created_at,
      fh.edited_at,
      fh.edited_by,
      f.url,
      fh.title,
      fh.description,
      fh.avatar
    FROM fandoms_history AS fh
    INNER JOIN fandoms AS f ON fh.id = f.id
    WHERE fh.id = target_id;

  $$ LANGUAGE sql;

  CREATE FUNCTION fandom_moders_update () RETURNS TRIGGER AS $$
    BEGIN

      NEW.edit_f := COALESCE(NEW.edit_f, OLD.edit_f);
      NEW.manage_f := COALESCE(NEW.manage_f, OLD.manage_f);
      NEW.ban_f := COALESCE(NEW.ban_f, OLD.ban_f);
      NEW.create_b := COALESCE(NEW.create_b, OLD.create_b);
      NEW.edit_b := COALESCE(NEW.edit_b, OLD.edit_b);
      NEW.edit_p := COALESCE(NEW.edit_p, OLD.edit_p);
      NEW.edit_c := COALESCE(NEW.edit_c, OLD.edit_c);

      RETURN NEW;

    END;
  $$ LANGUAGE plpgsql;

  CREATE TRIGGER update BEFORE UPDATE
  ON fandom_moders FOR EACH ROW EXECUTE PROCEDURE fandom_moders_update ();


downgrade: |
  DROP TRIGGER update ON fandom_moders;
  DROP FUNCTION fandom_moders_update ();
  DROP FUNCTION fandoms_history (BIGINT);
  DROP FUNCTION fandoms_create (BIGINT, CITEXT, TEXT, TEXT, TEXT);
  DROP FUNCTION fandoms_create (BIGINT, CITEXT, TEXT, TEXT, TEXT);
  DROP TRIGGER functions ON fandoms;
  DROP FUNCTION fandoms_functions ();
  DROP TABLE fandoms_history;
  DROP TABLE fandoms;
  DROP SEQUENCE fandom_id_seq;
  DROP TABLE fandom_bans;
  DROP TABLE fandom_moders;
