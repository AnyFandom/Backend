description: Create users

revision: 3f9ad65ecd20
down_revision: 0af4a475d46a

upgrade: |
  CREATE TABLE auth (
    PRIMARY KEY (id),
    UNIQUE (username),

    id            BIGINT                         NOT NULL,
    username      CITEXT                         NOT NULL,
    password_hash TEXT                           NOT NULL,
    random        UUID DEFAULT gen_random_uuid() NOT NULL
  );

  CREATE SEQUENCE user_id_seq;
  CREATE TABLE users (
    PRIMARY KEY (id),
    UNIQUE (username),

    id          BIGINT                    NOT NULL,
    created_at  TIMESTAMPTZ DEFAULT now() NOT NULL,
    edited_at   TIMESTAMPTZ DEFAULT now() NOT NULL,
    edited_by   BIGINT                    NOT NULL,
    username    CITEXT                    NOT NULL,
    description TEXT DEFAULT ''           NOT NULL,
    avatar      TEXT DEFAULT ''           NOT NULL
  );

  CREATE TABLE users_history (
    PRIMARY KEY (id, edited_at),

    id          BIGINT      NOT NULL,
    edited_at   TIMESTAMPTZ NOT NULL,
    edited_by   BIGINT      NOT NULL,
    description TEXT        NOT NULL,
    avatar      TEXT        NOT NULL
  );

  CREATE FUNCTION users_insert () RETURNS TRIGGER AS $$
    BEGIN

      NEW.edited_at = NEW.created_at;
      NEW.edited_by = NEW.id;

      RETURN NEW;

    END;
  $$ LANGUAGE plpgsql;

  CREATE FUNCTION users_update () RETURNS TRIGGER AS $$
    BEGIN

      NEW.edited_at = now();
      NEW.description = COALESCE(NEW.description, OLD.description);
      NEW.avatar = COALESCE(NEW.avatar, OLD.avatar);

      IF hstore(NEW) - hstore(OLD) - ARRAY['edited_by', 'edited_at'] = ''::hstore THEN
        RETURN NULL;
      END IF;

      INSERT INTO users_history (id, edited_at, edited_by, description, avatar)
      VALUES (OLD.id, OLD.edited_at, OLD.edited_by, OLD.description, OLD.avatar);

      RETURN NEW;

    END;
  $$ LANGUAGE plpgsql;

  CREATE TRIGGER insert BEFORE INSERT ON users FOR EACH ROW EXECUTE PROCEDURE users_insert ();
  CREATE TRIGGER update BEFORE UPDATE ON users FOR EACH ROW EXECUTE PROCEDURE users_update ();

  CREATE FUNCTION users_create (
    username      TEXT,
    password_hash TEXT
  ) RETURNS BIGINT AS $$
    BEGIN

      INSERT INTO users (id, username)
      VALUES (nextval('user_id_seq'), username);

      INSERT INTO auth (id, username, password_hash)
      VALUES (currval('user_id_seq'), username, password_hash);

      RETURN currval('user_id_seq');

    END;
  $$ LANGUAGE plpgsql;

  CREATE FUNCTION users_history (
    target_id BIGINT
  ) RETURNS SETOF users AS $$

    SELECT * FROM users WHERE id = target_id
    UNION ALL
    SELECT
      u.id,
      u.created_at,
      uh.edited_at,
      uh.edited_by,
      u.username,
      uh.description,
      uh.avatar
    FROM users_history AS uh
    INNER JOIN users AS u ON uh.id = u.id
    WHERE uh.id = target_id;

  $$ LANGUAGE sql;

downgrade: |
  DROP FUNCTION users_history (BIGINT);
  DROP FUNCTION users_create (TEXT, TEXT);
  DROP TRIGGER update ON users;
  DROP TRIGGER insert ON users;
  DROP FUNCTION users_update ();
  DROP FUNCTION users_insert ();
  DROP TABLE users_history;
  DROP TABLE users;
  DROP SEQUENCE user_id_seq;
  DROP TABLE auth;
