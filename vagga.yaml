_templates:
  volumes: &volumes
    /config: !BindRO /work/config
    /locks: !BindRW /work/locks


containers:
  _base:
    setup:
      - !Alpine v3.6
      - !AlpineRepo
        url: http://mirror.yandex.ru/mirrors/alpine/
        branch: edge
        repo: main
      - !EnsureDir /config
      - !EnsureDir /locks

  backend:
    setup:
      - !Container _base
      - !Install [postgresql-dev, gcc, python3-dev, musl-dev]
      - !PipConfig
        dependencies: true
      - !Py3Requirements requirements.txt
    environ-file: /config/backend.env
    volumes: *volumes

  postgres:
    setup:
      - !Container _base
      - !EnsureDir /data
      - !Install [postgresql, postgresql-contrib]
    environ-file: /config/postgres.env
    volumes:
      <<: *volumes
      /data: !Persistent
        name: postgres
        owner-uid: 70
        owner-gid: 70
        init_command: _init_db

  postgres-temp:
    setup:
     - !Container _base
     - !EnsureDir /data
     - !Install [postgresql, postgresql-contrib]
    environ-file: /config/postgres.env
    volumes:
      <<: *volumes
      /data: !Tmpfs
        mode: 0o777

  nginx:
    setup:
      - !Container _base
      - !Install [nginx]
    volumes:
      <<: *volumes
      /var/tmp: !Tmpfs
        subdirs:
          nginx:
      /var/lib/nginx: !Tmpfs
        subdirs:
          logs:
          tmp:

commands:
  _init_db: !Command
    description: Инициализировать базу данных
    container: postgres
    user-id: 70
    group-id: 70
    run: |
      set -ex

      pg_ctl init
      pg_ctl start -wo "-F --port=$PG_PORT -k /tmp"

      psql -h 127.0.0.1 -p $PG_PORT -c "CREATE USER $PG_USER WITH PASSWORD '$PG_PASS';"
      createdb -h 127.0.0.1 -p $PG_PORT -O $PG_USER $PG_DB

      psql -h 127.0.0.1 -p $PG_PORT -d $PG_DB -c "\
      ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO $PG_USER; \
      ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO $PG_USER; \
      ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO $PG_USER;"

      pg_ctl stop

  _backend_inst: &_backend !Command
    container: backend
    run: |
      chmod o+w /locks
      touch /locks/.dbmigrate.lock
      while [ -f /locks/.dbmigrate.lock ]; do sleep 0.2; done
      python3 manage.py run

  postgres: &postgres !Command
    description: Запустить базу данных
    user-id: 70
    group-id: 70
    container: postgres
    run: |
      trap "pg_ctl -w stop; trap - INT; kill -INT $$" INT
      pg_ctl -wo '-Fp $PG_PORT -k /tmp' start
      rm -f /locks/.dbstart.lock
      while sleep 86400; do :; done

  postgres-temp: &postgres-temp !Command
    container: postgres-temp
    run: |
      chown 70:70 /data

      trap "su postgres -c 'pg_ctl -w stop'; trap - INT; kill -INT $$" INT

      su postgres -c 'pg_ctl init'
      su postgres -c 'pg_ctl start -l /dev/null -wo "-F --port=$PG_PORT -k /tmp"'

      su postgres -c "psql -h 127.0.0.1 -p $PG_PORT -c \"CREATE USER $PG_USER WITH PASSWORD '$PG_PASS';\""
      su postgres -c 'createdb -h 127.0.0.1 -p $PG_PORT -O $PG_USER $PG_DB'

      su postgres -c '\
      psql -h 127.0.0.1 -p $PG_PORT -d $PG_DB -c "\
      ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO $PG_USER; \
      ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO $PG_USER; \
      ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO $PG_USER;"'

      rm -f /locks/.dbstart.lock
      while sleep 86400; do :; done

  nginx: &nginx !Command
    description: Запустить nginx
    container: nginx
    run: nginx -c /config/nginx.conf

  run: !Supervise
    description: Запустить все
    children:
      migrate: !Command
        container: backend
        run: |
          touch /locks/.dbstart.lock
          while [ -f /locks/.dbstart.lock ]; do sleep 0.2; done
          migro checkout head
          rm -f /locks/.dbmigrate.lock
          while sleep 86400; do :; done

      i1: !Command
        <<: *_backend
        environ: { server_port: 8081 }

      nginx: *nginx
      postgres: *postgres

  test-run: !Supervise
    children:
      migrate: !Command
        container: backend
        run: |
          touch /locks/.dbstart.lock
          while [ -f /locks/.dbstart.lock ]; do sleep 0.2; done
          migro checkout head
          rm -f /locks/.dbmigrate.lock
          while sleep 86400; do :; done

      i1: !Command
        <<: *_backend
        environ: { server_port: 8081, test: 1 }

      nginx: *nginx
      postgres: *postgres-temp
